Challenge 1

function transformFirstAndLast(array) {
	var myObject = {};
    myObject[array[0]] = array[array.length-1];
    return myObject;
}

transformFirstAndLast(['Kevin', 'Bacon', 'Love', 'Hart', 'Costner', 'Spacey']);

Challenge 2
 
function getAllKeys(obj){
  var array = [];
  for(var prop in obj){
    array.push(prop);
  }
  return array;
}

getAllKeys({name : 'Sam',age : 25,hasPets : true});

Challenge 3
 
function getElementsGreaterThan10AtProperty(obj, key) {
  var newArray = [];
  
  for(var element in obj[key]){
    if(obj[key][element] > 10){
      newArray.push(obj[key][element]);
    }
  }
  return newArray;
}

var obj = {key: [1, 20, 30]};

getElementsGreaterThan10AtProperty(obj, 'key');

Challenge 4
How would you use a closure to create a private counter? You will need to return more than one function. At least two. One to add to the
counter, and another to retrieve the value. You will need to research how to return more than one function from a function. 

TIP: Think method, rather than function. Do not use the prototype property directly...

Challenge 5
What is the result of running this code? Explain your answer.

var fullname = 'John Doe';
var obj = {
   fullname: 'Colin Ihrig',
   prop: {
      fullname: 'Aurelio De Rosa',
      getFullname: function() {
         return this.fullname;
      }
   }
};

console.log(obj.prop.getFullname());

var test = obj.prop.getFullname;

console.log(test());

The result of running this code is going to be 'Aurelio De Rosa' and 'John Doe'. The reasons for this are that when you
console.log(obj.prop.getFullname()) you're running the getFullname function on the object called obj with the property of prop and the
value of fullname in that object is 'Aurelio De Rosa'. Now with console.log(test()) you're running the getFullname function on the
global scope and there the value of fullname is 'John Doe'.

