Challenge 1

function transformFirstAndLast(array) {
	var myObject = {};
    myObject[array[0]] = array[array.length-1];
    return myObject;
}

transformFirstAndLast(['Kevin', 'Bacon', 'Love', 'Hart', 'Costner', 'Spacey']);

Challenge 2
 Write a function called "getAllKeys" which returns an array of all the input object's keys.
Example input:
 {
   name : 'Sam',
   age : 25,
   hasPets : true
 }

 Function's return value (output) :
 ['name', 'age', 'hasPets']

 Do not use "Object.keys" to solve this prompt.

 Note that your function should be able to handle any object passed in it.

 E.g. it should also handle an input like:
 {
   a : 'a',
   number : 11,
   hungry : true,
   grammyWins : 1
 }

 Function's return value (output):
 ['a', 'number', 'hungry', 'grammyWins']

 Starter Code:
 function getAllKeys(obj) {
   // your code here
 }

 {
   name : 'Sam',
   age : 25,
   hasPets : true
 }

Challenge 3
Write a function called "getElementsGreaterThan10AtProperty".

 Given an object and a key, "getElementsGreaterThan10AtProperty" returns an array containing the elements within the array, located at the given key, that are greater than 10.

 Notes:
 * If the array is empty, it should return an empty array.
 * If the array contains no elements greater than 10, it should return an empty array.
 * If the property at the given key is not an array, it should return an empty array.
 * If there is no property at the key, it should return an empty array. 

 var obj = {
   key: [1, 20, 30]
 };
 var output = getElementsGreaterThan10AtProperty(obj, 'key');
 console.log(output); // --> [20, 30]

 Starter Code :
 function getElementsGreaterThan10AtProperty(obj, key) {
   // your code here
 }

Challenge 4
How would you use a closure to create a private counter? You will need to return more than one function. At least two. One to add to the counter, and another to retrieve the value. You will need to research how to return more than one function from a function. 

TIP: Think method, rather than function. Do not use the prototype property directly...

Challenge 5
What is the result of running this code? Explain your answer.

var fullname = 'John Doe';
var obj = {
   fullname: 'Colin Ihrig',
   prop: {
      fullname: 'Aurelio De Rosa',
      getFullname: function() {
         return this.fullname;
      }
   }
};

console.log(obj.prop.getFullname());

var test = obj.prop.getFullname;

console.log(test());

The result of running this code is going to be 'Aurelio De Rosa' and 'John Doe'. The reasons for this are that when you console.log(obj.prop.getFullname()) you're running the getFullname function on the object called obj with the property of prop and the value of fullname in that object is 'Aurelio De Rosa'. Now with console.log(test()) you're running the getFullname function on the global scope and there the value of fullname is 'John Doe'.

